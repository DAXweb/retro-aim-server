// Code generated by mockery v2.51.1. DO NOT EDIT.

package foodgroup

import mock "github.com/stretchr/testify/mock"

// mockBARTManager is an autogenerated mock type for the BARTManager type
type mockBARTManager struct {
	mock.Mock
}

type mockBARTManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBARTManager) EXPECT() *mockBARTManager_Expecter {
	return &mockBARTManager_Expecter{mock: &_m.Mock}
}

// BARTRetrieve provides a mock function with given fields: itemHash
func (_m *mockBARTManager) BARTRetrieve(itemHash []byte) ([]byte, error) {
	ret := _m.Called(itemHash)

	if len(ret) == 0 {
		panic("no return value specified for BARTRetrieve")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(itemHash)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(itemHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(itemHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBARTManager_BARTRetrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BARTRetrieve'
type mockBARTManager_BARTRetrieve_Call struct {
	*mock.Call
}

// BARTRetrieve is a helper method to define mock.On call
//   - itemHash []byte
func (_e *mockBARTManager_Expecter) BARTRetrieve(itemHash interface{}) *mockBARTManager_BARTRetrieve_Call {
	return &mockBARTManager_BARTRetrieve_Call{Call: _e.mock.On("BARTRetrieve", itemHash)}
}

func (_c *mockBARTManager_BARTRetrieve_Call) Run(run func(itemHash []byte)) *mockBARTManager_BARTRetrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *mockBARTManager_BARTRetrieve_Call) Return(_a0 []byte, _a1 error) *mockBARTManager_BARTRetrieve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBARTManager_BARTRetrieve_Call) RunAndReturn(run func([]byte) ([]byte, error)) *mockBARTManager_BARTRetrieve_Call {
	_c.Call.Return(run)
	return _c
}

// BARTUpsert provides a mock function with given fields: itemHash, payload
func (_m *mockBARTManager) BARTUpsert(itemHash []byte, payload []byte) error {
	ret := _m.Called(itemHash, payload)

	if len(ret) == 0 {
		panic("no return value specified for BARTUpsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(itemHash, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBARTManager_BARTUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BARTUpsert'
type mockBARTManager_BARTUpsert_Call struct {
	*mock.Call
}

// BARTUpsert is a helper method to define mock.On call
//   - itemHash []byte
//   - payload []byte
func (_e *mockBARTManager_Expecter) BARTUpsert(itemHash interface{}, payload interface{}) *mockBARTManager_BARTUpsert_Call {
	return &mockBARTManager_BARTUpsert_Call{Call: _e.mock.On("BARTUpsert", itemHash, payload)}
}

func (_c *mockBARTManager_BARTUpsert_Call) Run(run func(itemHash []byte, payload []byte)) *mockBARTManager_BARTUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *mockBARTManager_BARTUpsert_Call) Return(_a0 error) *mockBARTManager_BARTUpsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBARTManager_BARTUpsert_Call) RunAndReturn(run func([]byte, []byte) error) *mockBARTManager_BARTUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBARTManager creates a new instance of mockBARTManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBARTManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBARTManager {
	mock := &mockBARTManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
