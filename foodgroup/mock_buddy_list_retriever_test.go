// Code generated by mockery v2.51.1. DO NOT EDIT.

package foodgroup

import (
	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"

	wire "github.com/mk6i/retro-aim-server/wire"
)

// mockBuddyListRetriever is an autogenerated mock type for the BuddyListRetriever type
type mockBuddyListRetriever struct {
	mock.Mock
}

type mockBuddyListRetriever_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBuddyListRetriever) EXPECT() *mockBuddyListRetriever_Expecter {
	return &mockBuddyListRetriever_Expecter{mock: &_m.Mock}
}

// AllRelationships provides a mock function with given fields: screenName, filter
func (_m *mockBuddyListRetriever) AllRelationships(screenName state.IdentScreenName, filter []state.IdentScreenName) ([]state.Relationship, error) {
	ret := _m.Called(screenName, filter)

	if len(ret) == 0 {
		panic("no return value specified for AllRelationships")
	}

	var r0 []state.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(state.IdentScreenName, []state.IdentScreenName) ([]state.Relationship, error)); ok {
		return rf(screenName, filter)
	}
	if rf, ok := ret.Get(0).(func(state.IdentScreenName, []state.IdentScreenName) []state.Relationship); ok {
		r0 = rf(screenName, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.Relationship)
		}
	}

	if rf, ok := ret.Get(1).(func(state.IdentScreenName, []state.IdentScreenName) error); ok {
		r1 = rf(screenName, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBuddyListRetriever_AllRelationships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllRelationships'
type mockBuddyListRetriever_AllRelationships_Call struct {
	*mock.Call
}

// AllRelationships is a helper method to define mock.On call
//   - screenName state.IdentScreenName
//   - filter []state.IdentScreenName
func (_e *mockBuddyListRetriever_Expecter) AllRelationships(screenName interface{}, filter interface{}) *mockBuddyListRetriever_AllRelationships_Call {
	return &mockBuddyListRetriever_AllRelationships_Call{Call: _e.mock.On("AllRelationships", screenName, filter)}
}

func (_c *mockBuddyListRetriever_AllRelationships_Call) Run(run func(screenName state.IdentScreenName, filter []state.IdentScreenName)) *mockBuddyListRetriever_AllRelationships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.IdentScreenName), args[1].([]state.IdentScreenName))
	})
	return _c
}

func (_c *mockBuddyListRetriever_AllRelationships_Call) Return(_a0 []state.Relationship, _a1 error) *mockBuddyListRetriever_AllRelationships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBuddyListRetriever_AllRelationships_Call) RunAndReturn(run func(state.IdentScreenName, []state.IdentScreenName) ([]state.Relationship, error)) *mockBuddyListRetriever_AllRelationships_Call {
	_c.Call.Return(run)
	return _c
}

// BuddyIconRefByName provides a mock function with given fields: screenName
func (_m *mockBuddyListRetriever) BuddyIconRefByName(screenName state.IdentScreenName) (*wire.BARTID, error) {
	ret := _m.Called(screenName)

	if len(ret) == 0 {
		panic("no return value specified for BuddyIconRefByName")
	}

	var r0 *wire.BARTID
	var r1 error
	if rf, ok := ret.Get(0).(func(state.IdentScreenName) (*wire.BARTID, error)); ok {
		return rf(screenName)
	}
	if rf, ok := ret.Get(0).(func(state.IdentScreenName) *wire.BARTID); ok {
		r0 = rf(screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wire.BARTID)
		}
	}

	if rf, ok := ret.Get(1).(func(state.IdentScreenName) error); ok {
		r1 = rf(screenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBuddyListRetriever_BuddyIconRefByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuddyIconRefByName'
type mockBuddyListRetriever_BuddyIconRefByName_Call struct {
	*mock.Call
}

// BuddyIconRefByName is a helper method to define mock.On call
//   - screenName state.IdentScreenName
func (_e *mockBuddyListRetriever_Expecter) BuddyIconRefByName(screenName interface{}) *mockBuddyListRetriever_BuddyIconRefByName_Call {
	return &mockBuddyListRetriever_BuddyIconRefByName_Call{Call: _e.mock.On("BuddyIconRefByName", screenName)}
}

func (_c *mockBuddyListRetriever_BuddyIconRefByName_Call) Run(run func(screenName state.IdentScreenName)) *mockBuddyListRetriever_BuddyIconRefByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockBuddyListRetriever_BuddyIconRefByName_Call) Return(_a0 *wire.BARTID, _a1 error) *mockBuddyListRetriever_BuddyIconRefByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBuddyListRetriever_BuddyIconRefByName_Call) RunAndReturn(run func(state.IdentScreenName) (*wire.BARTID, error)) *mockBuddyListRetriever_BuddyIconRefByName_Call {
	_c.Call.Return(run)
	return _c
}

// Relationship provides a mock function with given fields: me, them
func (_m *mockBuddyListRetriever) Relationship(me state.IdentScreenName, them state.IdentScreenName) (state.Relationship, error) {
	ret := _m.Called(me, them)

	if len(ret) == 0 {
		panic("no return value specified for Relationship")
	}

	var r0 state.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(state.IdentScreenName, state.IdentScreenName) (state.Relationship, error)); ok {
		return rf(me, them)
	}
	if rf, ok := ret.Get(0).(func(state.IdentScreenName, state.IdentScreenName) state.Relationship); ok {
		r0 = rf(me, them)
	} else {
		r0 = ret.Get(0).(state.Relationship)
	}

	if rf, ok := ret.Get(1).(func(state.IdentScreenName, state.IdentScreenName) error); ok {
		r1 = rf(me, them)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBuddyListRetriever_Relationship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Relationship'
type mockBuddyListRetriever_Relationship_Call struct {
	*mock.Call
}

// Relationship is a helper method to define mock.On call
//   - me state.IdentScreenName
//   - them state.IdentScreenName
func (_e *mockBuddyListRetriever_Expecter) Relationship(me interface{}, them interface{}) *mockBuddyListRetriever_Relationship_Call {
	return &mockBuddyListRetriever_Relationship_Call{Call: _e.mock.On("Relationship", me, them)}
}

func (_c *mockBuddyListRetriever_Relationship_Call) Run(run func(me state.IdentScreenName, them state.IdentScreenName)) *mockBuddyListRetriever_Relationship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.IdentScreenName), args[1].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockBuddyListRetriever_Relationship_Call) Return(_a0 state.Relationship, _a1 error) *mockBuddyListRetriever_Relationship_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBuddyListRetriever_Relationship_Call) RunAndReturn(run func(state.IdentScreenName, state.IdentScreenName) (state.Relationship, error)) *mockBuddyListRetriever_Relationship_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBuddyListRetriever creates a new instance of mockBuddyListRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBuddyListRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBuddyListRetriever {
	mock := &mockBuddyListRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
