// Code generated by mockery v2.52.1. DO NOT EDIT.

package oscar

import (
	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockSessionManager is an autogenerated mock type for the SessionManager type
type mockSessionManager struct {
	mock.Mock
}

type mockSessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSessionManager) EXPECT() *mockSessionManager_Expecter {
	return &mockSessionManager_Expecter{mock: &_m.Mock}
}

// RetrieveBOSSession provides a mock function with given fields: authCookie
func (_m *mockSessionManager) RetrieveBOSSession(authCookie []byte) (*state.Session, error) {
	ret := _m.Called(authCookie)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveBOSSession")
	}

	var r0 *state.Session
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*state.Session, error)); ok {
		return rf(authCookie)
	}
	if rf, ok := ret.Get(0).(func([]byte) *state.Session); ok {
		r0 = rf(authCookie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(authCookie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSessionManager_RetrieveBOSSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveBOSSession'
type mockSessionManager_RetrieveBOSSession_Call struct {
	*mock.Call
}

// RetrieveBOSSession is a helper method to define mock.On call
//   - authCookie []byte
func (_e *mockSessionManager_Expecter) RetrieveBOSSession(authCookie interface{}) *mockSessionManager_RetrieveBOSSession_Call {
	return &mockSessionManager_RetrieveBOSSession_Call{Call: _e.mock.On("RetrieveBOSSession", authCookie)}
}

func (_c *mockSessionManager_RetrieveBOSSession_Call) Run(run func(authCookie []byte)) *mockSessionManager_RetrieveBOSSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *mockSessionManager_RetrieveBOSSession_Call) Return(_a0 *state.Session, _a1 error) *mockSessionManager_RetrieveBOSSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSessionManager_RetrieveBOSSession_Call) RunAndReturn(run func([]byte) (*state.Session, error)) *mockSessionManager_RetrieveBOSSession_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSessionManager creates a new instance of mockSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSessionManager {
	mock := &mockSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
